version: '3.9'
services:
  hc-authentication-service:
   image: ${DOCKER_REGISTRY-}hc.authentication.service
   container_name: hc-auth-service
   ports:
    - "4200:8080"
    - "4201:8081"
   build:
    context: .
    dockerfile: Services/HC.Service.Authentication/Dockerfile
   environment: 
    ASPNETCORE_ENVIRONMENT: Development
    ASPNETCORE_URLS: "https://+:8081;http://+:8080"
    ASPNETCORE_Kestrel__Certificates__Default__Password: "CuongNM11!"
    ASPNETCORE_Kestrel__Certificates__Default__Path: /https/hc-api-cert.pfx
   volumes: 
      - ~/.aspnet/https:/https:ro
   networks:
      network-name:
        aliases:
          - api-server-name
   depends_on: 
    - sql-server  
  sql-server:
    image: "mcr.microsoft.com/mssql/server"
    container_name: sql-server
    ports:
      - "1450:1433" 
    environment:
      MSSQL_SA_PASSWORD: CuongNM11!
      ACCEPT_EULA: Y
    volumes:
      - sql-server-volume:/var/opt/mssql
    networks:
      network-name:
        aliases:
          - api-server-name
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      network-name:
        aliases:
          - api-server-name
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      network-name:
        aliases:
          - api-server-name
    depends_on:
      - zookeeper
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    networks:
      network-name:
        aliases:
          - api-server-name
    depends_on:
      - kafka
volumes:
  sql-server-volume:
networks:
  network-name: {}